name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "v*.*.*"  # e.g., v1.0.0 for production

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: iot_db
          POSTGRES_USER: iot_user
          POSTGRES_PASSWORD: iot_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U iot_user -d iot_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
          pip install black
          
      - name: Install black
        run: pip install black
 
      - name: Run Black formatter
        run: black .
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U iot_user; do
            echo "Waiting for postgres..."
            sleep 2
          done

      #- name: Run Tests
        #env:
          #DB_HOST: localhost
          #DB_NAME: iot_db
          #DB_USER: iot_user
          #DB_PASSWORD: iot_pass
        #run: |
           #pytest tests/

      - name: Build Docker Image
        run: docker build -t iot-api .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/iot-api
          docker tag iot-api $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

      - name: Build Docker image with cache
        run: |
          docker buildx create --use
          docker buildx build --cache-to=type=inline --cache-from=type=registry,ref=myimage:cache -t myimage:latest .

  staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start staging env with Docker Compose
        run: docker compose -f docker-compose.yml up -d --build

  production:
    name: Deploy to Production (Simulated)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: ci

    steps:
      - name: Simulate Production Deployment
        run: |
          echo "Simulating Production Deployment for tag ${{ github.ref_name }}"
          echo "Pull image and deploy to cloud server or orchestrator here."

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: staging 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy app to EC2
        run: |
          rsync -avz --exclude '.git' . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.DEPLOY_DIR }}

      - name: SSH and deploy on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            docker compose down
            docker compose up -d --build
          EOF

