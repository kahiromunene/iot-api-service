name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "v*.*.*"

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: iot_db
          POSTGRES_USER: iot_user
          POSTGRES_PASSWORD: iot_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U iot_user -d iot_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U iot_user; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run Tests
        env:
          DB_HOST: localhost
          DB_NAME: iot_db
          DB_USER: iot_user
          DB_PASSWORD: iot_pass
        run: PYTHONPATH=${{ github.workspace }} pytest tests/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/iot-api:latest .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iot-api:latest

  staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start staging env with Docker Compose
        run: docker-compose -f docker-compose.yml up -d --build

  production:
    name: Deploy to Production (Simulated)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: ci

    steps:
      - name: Simulate Production Deployment
        run: |
          echo "Simulating Production Deployment for tag ${{ github.ref_name }}"
          echo "Pull image and deploy to cloud server or orchestrator here."
